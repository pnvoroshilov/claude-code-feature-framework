{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3333/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000\n});\n\n// Types\n\n// API Functions\n\n// Projects\nexport const getProjects = async () => {\n  const response = await api.get('/projects');\n  return response.data;\n};\nexport const getActiveProject = async () => {\n  const response = await api.get('/projects/active');\n  return response.data;\n};\nexport const initializeProject = async data => {\n  const response = await api.post('/projects/initialize', data);\n  return response.data;\n};\nexport const updateProject = async (id, data) => {\n  const response = await api.patch(`/projects/${id}`, data);\n  return response.data;\n};\nexport const deleteProject = async id => {\n  await api.delete(`/projects/${id}`);\n};\nexport const activateProject = async id => {\n  const response = await api.post(`/projects/${id}/activate`);\n  return response.data;\n};\n\n// Tasks\nexport const getTasks = async (projectId, filters) => {\n  const params = new URLSearchParams();\n  if (filters !== null && filters !== void 0 && filters.status) params.append('status', filters.status);\n  if (filters !== null && filters !== void 0 && filters.priority) params.append('priority', filters.priority);\n  const response = await api.get(`/projects/${projectId}/tasks?${params}`);\n  return response.data;\n};\nexport const createTask = async (projectId, task) => {\n  const response = await api.post(`/projects/${projectId}/tasks`, task);\n  return response.data;\n};\nexport const updateTask = async (id, data) => {\n  const response = await api.patch(`/tasks/${id}`, data);\n  return response.data;\n};\nexport const updateTaskStatus = async (id, status, comment) => {\n  const response = await api.patch(`/tasks/${id}/status`, {\n    status,\n    comment\n  });\n  return response.data;\n};\nexport const deleteTask = async id => {\n  await api.delete(`/tasks/${id}`);\n};\n\n// MCP Integration\nexport const getConnectionStatus = async () => {\n  const response = await api.get('/mcp/connection');\n  return response.data;\n};\nexport const getTaskQueue = async () => {\n  const response = await api.get('/mcp/tasks/queue');\n  return response.data;\n};\nexport const getNextTask = async () => {\n  const response = await api.get('/mcp/next-task');\n  return response.data;\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","getProjects","response","get","data","getActiveProject","initializeProject","post","updateProject","id","patch","deleteProject","delete","activateProject","getTasks","projectId","filters","params","URLSearchParams","status","append","priority","createTask","task","updateTask","updateTaskStatus","comment","deleteTask","getConnectionStatus","getTaskQueue","getNextTask"],"sources":["/Users/pavelvorosilov/Desktop/Work/Start Up/Claude Code Feature Framework/claudetask/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3333/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n});\n\n// Types\nexport interface Project {\n  id: string;\n  name: string;\n  path: string;\n  github_repo?: string;\n  tech_stack: string[];\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface Task {\n  id: number;\n  project_id: string;\n  title: string;\n  description?: string;\n  type: 'Feature' | 'Bug';\n  priority: 'High' | 'Medium' | 'Low';\n  status: 'Backlog' | 'Analysis' | 'Ready' | 'In Progress' | 'Testing' | 'Code Review' | 'Done' | 'Blocked';\n  analysis?: string;\n  git_branch?: string;\n  worktree_path?: string;\n  assigned_agent?: string;\n  estimated_hours?: number;\n  created_at: string;\n  updated_at: string;\n  completed_at?: string;\n}\n\nexport interface ConnectionStatus {\n  connected: boolean;\n  project_name?: string;\n  project_path?: string;\n  tasks_count: number;\n  active_task?: Task;\n  error?: string;\n}\n\nexport interface TaskQueue {\n  pending_tasks: Task[];\n  in_progress_tasks: Task[];\n  completed_today: number;\n}\n\nexport interface InitializeProjectRequest {\n  project_path: string;\n  project_name: string;\n  github_repo?: string;\n}\n\nexport interface InitializeProjectResponse {\n  project_id: string;\n  mcp_configured: boolean;\n  files_created: string[];\n  claude_restart_required: boolean;\n}\n\n// API Functions\n\n// Projects\nexport const getProjects = async (): Promise<Project[]> => {\n  const response = await api.get('/projects');\n  return response.data;\n};\n\nexport const getActiveProject = async (): Promise<Project | null> => {\n  const response = await api.get('/projects/active');\n  return response.data;\n};\n\nexport const initializeProject = async (data: InitializeProjectRequest): Promise<InitializeProjectResponse> => {\n  const response = await api.post('/projects/initialize', data);\n  return response.data;\n};\n\nexport const updateProject = async (id: string, data: Partial<Project>): Promise<Project> => {\n  const response = await api.patch(`/projects/${id}`, data);\n  return response.data;\n};\n\nexport const deleteProject = async (id: string): Promise<void> => {\n  await api.delete(`/projects/${id}`);\n};\n\nexport const activateProject = async (id: string): Promise<Project> => {\n  const response = await api.post(`/projects/${id}/activate`);\n  return response.data;\n};\n\n// Tasks\nexport const getTasks = async (projectId: string, filters?: {\n  status?: string;\n  priority?: string;\n}): Promise<Task[]> => {\n  const params = new URLSearchParams();\n  if (filters?.status) params.append('status', filters.status);\n  if (filters?.priority) params.append('priority', filters.priority);\n  \n  const response = await api.get(`/projects/${projectId}/tasks?${params}`);\n  return response.data;\n};\n\nexport const createTask = async (projectId: string, task: {\n  title: string;\n  description?: string;\n  type?: 'Feature' | 'Bug';\n  priority?: 'High' | 'Medium' | 'Low';\n}): Promise<Task> => {\n  const response = await api.post(`/projects/${projectId}/tasks`, task);\n  return response.data;\n};\n\nexport const updateTask = async (id: number, data: Partial<Task>): Promise<Task> => {\n  const response = await api.patch(`/tasks/${id}`, data);\n  return response.data;\n};\n\nexport const updateTaskStatus = async (id: number, status: string, comment?: string): Promise<Task> => {\n  const response = await api.patch(`/tasks/${id}/status`, { status, comment });\n  return response.data;\n};\n\nexport const deleteTask = async (id: number): Promise<void> => {\n  await api.delete(`/tasks/${id}`);\n};\n\n// MCP Integration\nexport const getConnectionStatus = async (): Promise<ConnectionStatus> => {\n  const response = await api.get('/mcp/connection');\n  return response.data;\n};\n\nexport const getTaskQueue = async (): Promise<TaskQueue> => {\n  const response = await api.get('/mcp/tasks/queue');\n  return response.data;\n};\n\nexport const getNextTask = async (): Promise<Task | null> => {\n  const response = await api.get('/mcp/next-task');\n  return response.data;\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}